{"version":3,"file":"static/js/707.efd1d034.chunk.js","mappings":"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","sources":["pages/ServicesPage/index.tsx","pages/ServicesPage/useBackgroundColor.tsx"],"sourcesContent":["import React, { lazy, Suspense } from 'react';\nimport { Redirect, Route, Switch, useRouteMatch } from 'react-router-dom';\nimport useBackgroundColor from './useBackgroundColor';\n\nconst Container = lazy(() => import(\"../../common/Container\"));\nconst ScrollToTop = lazy(() => import(\"../../common/ScrollToTop\"));\n\nconst SoftwareSolutions = lazy(() => import('./softwareSolutions'));\nconst TechConsultations = lazy(() => import('./techConsultations'));\nconst CloudSolutions = lazy(() => import('./cloudSolutions'));\nconst PerformanceOptimization = lazy(() => import('./performanceOptimization'));\nconst CustomIntegrations = lazy(() => import('./customIntegrations'));\nconst OnGoingSupport = lazy(() => import('./onGoingSupport'));\n\nconst ServicesPage = () => {\n  const match = useRouteMatch();\n  const sections = [\n    { id: 'services', color: '#f4dcdc' },\n    { id: 'about', color: '#ffe0b2' },\n  ];\n\n  let backgroundColor = useBackgroundColor(sections);\n  if (backgroundColor === 'transparent') {\n    backgroundColor = '#597B73';\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Container backgroundColor={backgroundColor}>\n        <div className=\"child\" style={{ backgroundColor: backgroundColor }}>\n          <Switch>\n            <Route path={`${match.path}/software-solutions`} component={SoftwareSolutions} />\n            <Route path={`${match.path}/tech-consultations`} component={TechConsultations} />\n            <Route path={`${match.path}/cloud-solutions`} component={CloudSolutions} />\n            <Route path={`${match.path}/performance-optimization`} component={PerformanceOptimization} />\n            <Route path={`${match.path}/custom-integrations`} component={CustomIntegrations} />\n            <Route path={`${match.path}/on-going-support`} component={OnGoingSupport} />\n            <Route exact path={match.path}>\n              <Redirect to=\"/home\" />\n            </Route>\n          </Switch>\n          <ScrollToTop />\n        </div>\n      </Container>\n    </Suspense>\n  );\n};\n\nexport default ServicesPage;\n","import { useState, useEffect } from \"react\";\n\ninterface Section {\n  id: string;\n  color: string;\n}\n\nconst useBackgroundColor = (sections: Section[]) => {\n  const [backgroundColor, setBackgroundColor] = useState<string>(\"transparent\");\n  const [isNavbarFixed, setIsNavbarFixed] = useState<boolean>(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const navbar = document.getElementById(\"navbar\");\n\n      if (navbar) {\n        const navbarIsFixed = window.getComputedStyle(navbar).position === \"fixed\";\n\n        if (navbarIsFixed && !isNavbarFixed) {\n          setIsNavbarFixed(true);\n        } else if (!navbarIsFixed && isNavbarFixed) {\n          setIsNavbarFixed(false);\n          setBackgroundColor(\"transparent\");\n        }\n\n        if (navbarIsFixed) {\n          const sectionInView = sections.find(({ id }) => {\n            const element = document.getElementById(id);\n            if (!element) return false;\n            const rect = element.getBoundingClientRect();\n            return rect.top <= window.innerHeight && rect.bottom >= 0;\n          });\n\n          if (sectionInView) {\n            setBackgroundColor(sectionInView.color);\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    handleScroll(); // Initial check\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [sections, isNavbarFixed]);\n\n  useEffect(() => {\n    document.body.style.backgroundColor = backgroundColor;\n  }, [backgroundColor]);\n\n  // Apply transition duration to body and theme-color meta tag\n  useEffect(() => {\n    const body = document.body;\n    const themeColorMetaTag = document.querySelector('meta[name=\"theme-color\"]');\n    if (backgroundColor === \"transparent\") {\n      body.style.transition = \"background-color 0.5s ease\"; // Smooth transition from transparent\n    } else {\n      body.style.transition = \"background-color 0.3s ease\"; // Faster transition for other colors\n    }\n\n\n    // body.style.transition = \"background-color 0.5s ease\"; // Smooth transition effect\n\n    return () => {\n      body.style.transition = \"\"; // Clean up transition on unmount\n    };\n  }, []);\n\n  useEffect(() => {\n    let backgroundColor = document.body.style.backgroundColor;\n    // if (backgroundColor == \"transparent\") {\n    //   // backgroundColor = \"#yellow\"\n    // }\n    const themeColorMetaTag = document.querySelector('meta[name=\"theme-color\"]');\n    if (themeColorMetaTag) {\n      themeColorMetaTag.setAttribute(\"content\", backgroundColor);\n    } else {\n      const meta = document.createElement('meta');\n      meta.name = \"theme-color\";\n      meta.content = backgroundColor;\n      document.head.appendChild(meta);\n    }\n  }, [backgroundColor]);\n\n  \n\n  return backgroundColor;\n};\n\n\n\nexport default useBackgroundColor;\n"],"names":["Container","lazy","ScrollToTop","SoftwareSolutions","TechConsultations","CloudSolutions","PerformanceOptimization","CustomIntegrations","OnGoingSupport","ServicesPage","match","useRouteMatch","backgroundColor","useBackgroundColor","id","color","_jsx","Suspense","fallback","children","_jsxs","className","style","Switch","Route","path","concat","component","exact","Redirect","to","sections","setBackgroundColor","useState","isNavbarFixed","setIsNavbarFixed","useEffect","handleScroll","navbar","document","getElementById","navbarIsFixed","window","getComputedStyle","position","sectionInView","find","_ref","element","rect","getBoundingClientRect","top","innerHeight","bottom","addEventListener","removeEventListener","body","querySelector","transition","themeColorMetaTag","setAttribute","meta","createElement","name","content","head","appendChild"],"sourceRoot":""}