{"version":3,"file":"static/js/565.cfe542bf.chunk.js","mappings":"0IAOA,MAiEA,EAjE4BA,IAC1B,MAAOC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAiB,gBACxDC,EAAeC,IAAoBF,EAAAA,EAAAA,WAAkB,GA4D5D,OA1DAG,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAeA,KACnB,MAAMC,EAASC,SAASC,eAAe,UAEvC,GAAIF,EAAQ,CACV,MAAMG,EAA6D,UAA7CC,OAAOC,iBAAiBL,GAAQM,SAStD,GAPIH,IAAkBP,EACpBC,GAAiB,IACPM,GAAiBP,IAC3BC,GAAiB,GACjBH,EAAmB,gBAGjBS,EAAe,CACjB,MAAMI,EAAgBf,EAASgB,MAAKC,IAAa,IAAZ,GAAEC,GAAID,EACzC,MAAME,EAAUV,SAASC,eAAeQ,GACxC,IAAKC,EAAS,OAAO,EACrB,MAAMC,EAAOD,EAAQE,wBACrB,OAAOD,EAAKE,KAAOV,OAAOW,aAAeH,EAAKI,QAAU,CAAC,IAGvDT,GACFb,EAAmBa,EAAcU,MAErC,CACF,GAMF,OAHAb,OAAOc,iBAAiB,SAAUnB,GAClCA,IAEO,KACLK,OAAOe,oBAAoB,SAAUpB,EAAa,CACnD,GACA,CAACP,EAAUI,KAEdE,EAAAA,EAAAA,YAAU,KACRG,SAASmB,KAAKC,MAAM5B,gBAAkBA,CAAe,GACpD,CAACA,KAGJK,EAAAA,EAAAA,YAAU,KACR,IAAIL,EAAkBQ,SAASmB,KAAKC,MAAM5B,gBACnB,eAAnBA,IACFA,EAAkB,QAEpB,MAAM6B,EAAoBrB,SAASsB,cAAc,4BACjD,GAAID,EACFA,EAAkBE,aAAa,UAAW/B,OACrC,CACL,MAAMgC,EAAOxB,SAASyB,cAAc,QACpCD,EAAKE,KAAO,cACZF,EAAKG,QAAUnC,EACfQ,SAAS4B,KAAKC,YAAYL,EAC5B,IACC,CAAChC,IAEGA,CAAe,C","sources":["pages/Home/useBackgroundColor.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\ninterface Section {\n  id: string;\n  color: string;\n}\n\nconst useBackgroundColor = (sections: Section[]) => {\n  const [backgroundColor, setBackgroundColor] = useState<string>(\"transparent\");\n  const [isNavbarFixed, setIsNavbarFixed] = useState<boolean>(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const navbar = document.getElementById(\"navbar\");\n\n      if (navbar) {\n        const navbarIsFixed = window.getComputedStyle(navbar).position === \"fixed\";\n\n        if (navbarIsFixed && !isNavbarFixed) {\n          setIsNavbarFixed(true);\n        } else if (!navbarIsFixed && isNavbarFixed) {\n          setIsNavbarFixed(false);\n          setBackgroundColor(\"transparent\");\n        }\n\n        if (navbarIsFixed) {\n          const sectionInView = sections.find(({ id }) => {\n            const element = document.getElementById(id);\n            if (!element) return false;\n            const rect = element.getBoundingClientRect();\n            return rect.top <= window.innerHeight && rect.bottom >= 0;\n          });\n\n          if (sectionInView) {\n            setBackgroundColor(sectionInView.color);\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    handleScroll(); // Initial check\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [sections, isNavbarFixed]);\n\n  useEffect(() => {\n    document.body.style.backgroundColor = backgroundColor;\n  }, [backgroundColor]);\n\n\n  useEffect(() => {\n    let backgroundColor = document.body.style.backgroundColor;\n    if (backgroundColor == \"transparent\") {\n      backgroundColor = \"#fff\"\n    }\n    const themeColorMetaTag = document.querySelector('meta[name=\"theme-color\"]');\n    if (themeColorMetaTag) {\n      themeColorMetaTag.setAttribute(\"content\", backgroundColor);\n    } else {\n      const meta = document.createElement('meta');\n      meta.name = \"theme-color\";\n      meta.content = backgroundColor;\n      document.head.appendChild(meta);\n    }\n  }, [backgroundColor]);\n\n  return backgroundColor;\n};\n\nexport default useBackgroundColor;\n"],"names":["sections","backgroundColor","setBackgroundColor","useState","isNavbarFixed","setIsNavbarFixed","useEffect","handleScroll","navbar","document","getElementById","navbarIsFixed","window","getComputedStyle","position","sectionInView","find","_ref","id","element","rect","getBoundingClientRect","top","innerHeight","bottom","color","addEventListener","removeEventListener","body","style","themeColorMetaTag","querySelector","setAttribute","meta","createElement","name","content","head","appendChild"],"sourceRoot":""}