{"version":3,"file":"static/js/755.eae93fed.chunk.js","mappings":"u6EAQA,MAAMA,GAAUC,EAAAA,EAAAA,OAAK,IAAM,wDACrBC,GAAYD,EAAAA,EAAAA,OAAK,IAAM,yCACvBE,GAAcF,EAAAA,EAAAA,OAAK,IAAM,gCACzBG,GAAeH,EAAAA,EAAAA,OAAK,IAAM,wDA2DhC,EAtDaI,KAQX,IAAIC,GAAkBC,EAAAA,EAAAA,SAPL,CACf,CAAEC,GAAI,WAAYC,MAAO,WACzB,CAAED,GAAI,UAAWC,MAAO,WACxB,CAAED,GAAI,QAASC,MAAO,WACtB,CAAED,GAAI,UAAWC,MAAO,aAU1B,OALEH,EADqB,eAAnBA,EACgB,UAEA,eAIlBI,EAAAA,EAAAA,MAACR,EAAS,CAAAS,SAAA,EACRC,EAAAA,EAAAA,KAACT,EAAW,KAEZS,EAAAA,EAAAA,KAACR,EAAY,CACXS,KAAK,SACLC,MAAOC,EAAAA,GACPC,QAASD,EAAAA,GACTE,QAASF,EAAAA,GACTG,KAAK,WACLV,GAAG,WACHF,gBAAiBA,KAEnBM,EAAAA,EAAAA,KAACR,EAAY,CACXS,KAAK,QACLC,MAAOK,EAAAA,EACPH,QAASG,EAAAA,EACTD,KAAK,cACLV,GAAG,UACHF,gBAAiBA,KAEnBM,EAAAA,EAAAA,KAACR,EAAY,CACXS,KAAK,OACLC,MAAOM,EAAAA,EACPJ,QAASI,EAAAA,EACTF,KAAK,0BACLV,GAAG,QACHF,gBAAiBA,KAEnBM,EAAAA,EAAAA,KAACZ,EAAO,CACNc,MAAOO,EAAAA,EACPL,QAASK,EAAAA,EACTb,GAAG,UACHF,gBAAiBA,MAET,C,4DC3DhB,MAiEA,EAjE4BgB,IAC1B,MAAOhB,EAAiBiB,IAAsBC,EAAAA,EAAAA,UAAiB,gBACxDC,EAAeC,IAAoBF,EAAAA,EAAAA,WAAkB,GA4D5D,OA1DAG,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAeA,KACnB,MAAMC,EAASC,SAASC,eAAe,UAEvC,GAAIF,EAAQ,CACV,MAAMG,EAA6D,UAA7CC,OAAOC,iBAAiBL,GAAQM,SAStD,GAPIH,IAAkBP,EACpBC,GAAiB,IACPM,GAAiBP,IAC3BC,GAAiB,GACjBH,EAAmB,gBAGjBS,EAAe,CACjB,MAAMI,EAAgBd,EAASe,MAAKC,IAAa,IAAZ,GAAE9B,GAAI8B,EACzC,MAAMC,EAAUT,SAASC,eAAevB,GACxC,IAAK+B,EAAS,OAAO,EACrB,MAAMC,EAAOD,EAAQE,wBACrB,OAAOD,EAAKE,KAAOT,OAAOU,aAAeH,EAAKI,QAAU,CAAC,IAGvDR,GACFb,EAAmBa,EAAc3B,MAErC,CACF,GAMF,OAHAwB,OAAOY,iBAAiB,SAAUjB,GAClCA,IAEO,KACLK,OAAOa,oBAAoB,SAAUlB,EAAa,CACnD,GACA,CAACN,EAAUG,KAEdE,EAAAA,EAAAA,YAAU,KACRG,SAASiB,KAAKC,MAAM1C,gBAAkBA,CAAe,GACpD,CAACA,KAGJqB,EAAAA,EAAAA,YAAU,KACR,IAAIrB,EAAkBwB,SAASiB,KAAKC,MAAM1C,gBACnB,eAAnBA,IACFA,EAAkB,QAEpB,MAAM2C,EAAoBnB,SAASoB,cAAc,4BACjD,GAAID,EACFA,EAAkBE,aAAa,UAAW7C,OACrC,CACL,MAAM8C,EAAOtB,SAASuB,cAAc,QACpCD,EAAKE,KAAO,cACZF,EAAKpC,QAAUV,EACfwB,SAASyB,KAAKC,YAAYJ,EAC5B,IACC,CAAC9C,IAEGA,CAAe,C","sources":["pages/Home/index.tsx","pages/Home/useBackgroundColor.tsx"],"sourcesContent":["import { lazy } from \"react\";\r\nimport ServicesContent from \"../../content/ServicesContent.json\";\r\nimport MissionContent from \"../../content/MissionContent.json\";\r\nimport AboutContent from \"../../content/AboutContent.json\";\r\nimport ContactContent from \"../../content/ContactContent.json\";\r\nimport useBackgroundColor from \"./useBackgroundColor\";\r\n\r\n\r\nconst Contact = lazy(() => import(\"../../components/ContactForm\"));\r\nconst Container = lazy(() => import(\"../../common/Container\"));\r\nconst ScrollToTop = lazy(() => import(\"../../common/ScrollToTop\"));\r\nconst ContentBlock = lazy(() => import(\"../../components/ContentBlock\"));\r\n\r\n\r\n\r\n\r\nconst Home = () => {\r\n  const sections = [\r\n    { id: \"services\", color: \"#f4dcdc\" },\r\n    { id: \"mission\", color: \"#FEC654\" },\r\n    { id: \"about\", color: \"#597B73\" },\r\n    { id: \"contact\", color: \"#ffe0b2\" },\r\n  ];\r\n\r\n  let backgroundColor = useBackgroundColor(sections) \r\n  if (backgroundColor == \"transparent\") {\r\n    backgroundColor = \"#597B73\";\r\n  } else {\r\n    backgroundColor = \"transparent\"\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <ScrollToTop />\r\n\r\n      <ContentBlock\r\n        type=\"center\"\r\n        title={ServicesContent.title}\r\n        content={ServicesContent.text}\r\n        section={ServicesContent.section}\r\n        icon=\"SDLC.svg\"\r\n        id=\"services\"\r\n        backgroundColor={backgroundColor}\r\n      />\r\n      <ContentBlock\r\n        type=\"right\"\r\n        title={MissionContent.title}\r\n        content={MissionContent.text}\r\n        icon=\"MISSION.svg\"\r\n        id=\"mission\"\r\n        backgroundColor={backgroundColor}\r\n      />\r\n      <ContentBlock\r\n        type=\"left\"\r\n        title={AboutContent.title}\r\n        content={AboutContent.text}\r\n        icon=\"ANIMATED_PROGRAMMER.svg\"\r\n        id=\"about\"\r\n        backgroundColor={backgroundColor}\r\n      />\r\n      <Contact\r\n        title={ContactContent.title}\r\n        content={ContactContent.text}\r\n        id=\"contact\"\r\n        backgroundColor={backgroundColor}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useState, useEffect } from \"react\";\n\ninterface Section {\n  id: string;\n  color: string;\n}\n\nconst useBackgroundColor = (sections: Section[]) => {\n  const [backgroundColor, setBackgroundColor] = useState<string>(\"transparent\");\n  const [isNavbarFixed, setIsNavbarFixed] = useState<boolean>(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const navbar = document.getElementById(\"navbar\");\n\n      if (navbar) {\n        const navbarIsFixed = window.getComputedStyle(navbar).position === \"fixed\";\n\n        if (navbarIsFixed && !isNavbarFixed) {\n          setIsNavbarFixed(true);\n        } else if (!navbarIsFixed && isNavbarFixed) {\n          setIsNavbarFixed(false);\n          setBackgroundColor(\"transparent\");\n        }\n\n        if (navbarIsFixed) {\n          const sectionInView = sections.find(({ id }) => {\n            const element = document.getElementById(id);\n            if (!element) return false;\n            const rect = element.getBoundingClientRect();\n            return rect.top <= window.innerHeight && rect.bottom >= 0;\n          });\n\n          if (sectionInView) {\n            setBackgroundColor(sectionInView.color);\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    handleScroll(); // Initial check\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [sections, isNavbarFixed]);\n\n  useEffect(() => {\n    document.body.style.backgroundColor = backgroundColor;\n  }, [backgroundColor]);\n\n\n  useEffect(() => {\n    let backgroundColor = document.body.style.backgroundColor;\n    if (backgroundColor == \"transparent\") {\n      backgroundColor = \"#fff\"\n    }\n    const themeColorMetaTag = document.querySelector('meta[name=\"theme-color\"]');\n    if (themeColorMetaTag) {\n      themeColorMetaTag.setAttribute(\"content\", backgroundColor);\n    } else {\n      const meta = document.createElement('meta');\n      meta.name = \"theme-color\";\n      meta.content = backgroundColor;\n      document.head.appendChild(meta);\n    }\n  }, [backgroundColor]);\n\n  return backgroundColor;\n};\n\nexport default useBackgroundColor;\n"],"names":["Contact","lazy","Container","ScrollToTop","ContentBlock","Home","backgroundColor","useBackgroundColor","id","color","_jsxs","children","_jsx","type","title","ServicesContent","content","section","icon","MissionContent","AboutContent","ContactContent","sections","setBackgroundColor","useState","isNavbarFixed","setIsNavbarFixed","useEffect","handleScroll","navbar","document","getElementById","navbarIsFixed","window","getComputedStyle","position","sectionInView","find","_ref","element","rect","getBoundingClientRect","top","innerHeight","bottom","addEventListener","removeEventListener","body","style","themeColorMetaTag","querySelector","setAttribute","meta","createElement","name","head","appendChild"],"sourceRoot":""}