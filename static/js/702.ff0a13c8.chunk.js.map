{"version":3,"file":"static/js/702.ff0a13c8.chunk.js","mappings":"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","sources":["pages/ServicesPage/performanceOptimization.tsx","content/servicesPageContent/PerformanceOptimization.tsx","pages/ServicesPage/useBackgroundColor.tsx"],"sourcesContent":["// Example for SoftwareSolutions.tsx\n\nimport { lazy } from \"react\";\nimport PerformanceOptimizationContent from '../../content/servicesPageContent/PerformanceOptimization'; // Import your content here\n\nimport ContactContent from \"../../content/ContactContent.json\";\nimport useBackgroundColor from \"./useBackgroundColor\";\n\nconst MiddleBlock = lazy(() => import(\"../../components/MiddleBlock\"));\nconst Contact = lazy(() => import(\"../../components/ContactForm\"));\nconst Container = lazy(() => import(\"../../common/Container\"));\nconst ScrollToTop = lazy(() => import(\"../../common/ScrollToTop\"));\n\nconst PerformanceOptimization = () => {\n  const sections = [\n    // { id: \"motto\", color: \"#E5ACAC\" },\n    { id: \"motto\", color: \"#ffe0b2\" },\n    // { id: \"motto\", color: \"#597B73\" },\n\n    { id: \"services\", color: \"#f4dcdc\" },\n    { id: \"process\", color: \"#FEC654\" },\n    { id: \"about\", color: \"#f4dcdc\" },\n    { id: \"contact\", color: \"#ffe0b2\" },\n  ];\n\n  let backgroundColor = useBackgroundColor(sections)\n  if (backgroundColor === \"transparent\") {\n    backgroundColor = \"#597B73\";\n  } else {\n    backgroundColor = \"transparent\"\n  }\n\n  return (\n    <Container backgroundColor={backgroundColor}>\n      <div className=\"child\" style={{ backgroundColor: backgroundColor }}>\n        <MiddleBlock\n          title=\"Escape the Ordinary: Partner with Saguaro Software Solutions to Elevate Your Business to the next level.\"\n          content=\"If you are not in the business of cutting cookies, why settle for cookie cutter solutions?\"\n          id=\"motto\"\n          backgroundColor={backgroundColor}\n        />\n\n        <MiddleBlock\n          title=\"PERFORMANCE OPTIMIZATION\"\n          content= \"this is a placeholder for performance optimization.\"\n          id=\"motto\"\n          backgroundColor={backgroundColor}\n        />\n\n        <div\n          className=\"content-container\"\n          dangerouslySetInnerHTML={{ __html: PerformanceOptimizationContent }}\n        />\n\n        <Contact\n          title={ContactContent.title}\n          content={ContactContent.text}\n          id=\"contact\"\n          backgroundColor={backgroundColor}\n        />\n\n      </div>\n      <ScrollToTop />\n    </Container>\n  );\n};\n\nexport default PerformanceOptimization;\n","const PerformanceOptimizationContent = `\n<html><div className=\"doc-content\">\n      <h4 className=\"c7\" id=\"h.vd108xqo6hd\">\n        <span className=\"c1 c12\">Scenario 1: Database Query Optimization for an E-commerce Platform</span>\n      </h4>\n      <p className=\"c3\">\n        <span className=\"c1\">Issue</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">An e-commerce platform is experiencing slow response times during peak shopping periods, resulting in a poor user experience and lost sales. The root cause is identified as inefficient database queries and lack of indexing.</span>\n      </p>\n      <p className=\"c3\">\n        <span className=\"c1\">Solution</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\"></span>\n      </p>\n      <ul className=\"c3\">\n        <li className=\"c1 li-bullet-0\"><p><span className=\"c1\">Query Optimization</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">We conduct a thorough analysis of the database queries and identify slow-performing queries. By rewriting these queries to be more efficient, we reduce their execution time.</span></p></li>\n        <li className=\"c2 li-bullet-0\"><p><span className=\"c1\">Indexing</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">We analyze the database schema and usage patterns to implement appropriate indexing strategies. Indexing key columns significantly improves data retrieval times.</span></p></li>\n        <li className=\"c2 li-bullet-0\"><p><span className=\"c1\">Caching</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">Implementing query caching and using in-memory data stores like Redis or Memcached helps reduce the load on the database by storing frequently accessed data in memory.</span></p></li>\n        <li className=\"c2 li-bullet-0\"><p><span className=\"c1\">Database Sharding</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">For very large databases, we consider sharding the database to distribute the load across multiple servers, thereby improving performance and scalability.</span></p></li>\n      </ul>\n      <p className=\"c3\">\n        <span className=\"c1\">Ongoing Support Provided</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\"> Regular performance monitoring, continuous query optimization, and periodic indexing updates to adapt to changing data usage patterns.</span>\n      </p>\n      <h4 className=\"c7\" id=\"h.ja949a830j54\">\n        <span className=\"c12 c1\">Scenario 2: API Performance Enhancement for a Financial Services Application</span>\n      </h4>\n      <p className=\"c3\">\n        <span className=\"c1\">Issue</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">A financial services application is experiencing high latency and timeouts when processing large volumes of transactions through its APIs, leading to customer dissatisfaction.</span>\n      </p>\n      <p className=\"c3\">\n        <span className=\"c1\">Solution</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\"></span>\n      </p>\n      <ul className=\"c6\">\n        <li className=\"c2 li-bullet-0\"><p><span className=\"c1\">Load Balancing</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">We implement load balancing to distribute API requests across multiple servers, ensuring no single server becomes a bottleneck.</span></p></li>\n        <li className=\"c2 li-bullet-0\"><p><span className=\"c1\">Asynchronous Processing</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">We convert synchronous API calls to asynchronous where possible, allowing the system to handle more requests concurrently and improve responsiveness.</span></p></li>\n        <li className=\"c2 li-bullet-0\"><p><span className=\"c1\">Rate Limiting</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">Implementing rate limiting ensures that no single user or service can overwhelm the API, thus maintaining performance for all users.</span></p></li>\n        <li className=\"c2 li-bullet-0\"><p><span className=\"c1\">Resource Optimization</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">We profile the application to identify and optimize resource-intensive operations, such as heavy computational tasks or large data transfers. This may include refactoring code or optimizing data structures.</span></p></li>\n      </ul>\n      <p className=\"c3\">\n        <span className=\"c1\">Ongoing Support Provided</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">Continuous API performance monitoring, regular load testing, and ongoing adjustments to load balancing and rate limiting policies.</span>\n      </p>\n\n      <h4 className=\"c7\" id=\"h.ja949a830j54\">\n        <span className=\"c12 c1\">Scenario 3: Microservices Performance Tuning for a SaaS Application</span>\n      </h4>\n      <p className=\"c3\">\n        <span className=\"c1\">Issue</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">A SaaS application built using a microservices architecture is facing latency issues and slow inter-service communication, impacting overall system performance.</span>\n      </p>\n      <p className=\"c3\">\n        <span className=\"c1\">Solution</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\"></span>\n      </p>\n      <ul className=\"c6\">\n        <li className=\"c2 li-bullet-0\"><p><span className=\"c1\">Service Profiling</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">We profile each microservice to identify performance bottlenecks. This involves analyzing response times, resource usage, and communication patterns between services.</span></p></li>\n        <li className=\"c2 li-bullet-0\"><p><span className=\"c1\">Optimizing Inter-Service Communication</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">We optimize communication protocols between microservices by switching to more efficient protocols (e.g., gRPC instead of HTTP/REST) and reducing the payload size where possible.</span></p></li>\n        <li className=\"c2 li-bullet-0\"><p><span className=\"c1\">Scaling Services</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">Implementing auto-scaling policies for microservices allows the system to automatically scale up or down based on demand, ensuring optimal resource utilization and performance.</span></p></li>\n        <li className=\"c2 li-bullet-0\"><p><span className=\"c1\">Containerization and Orchestration</span><span className=\"c4\">:</span><span className=\"c5\">&nbsp;</span><span className=\"c0\">Using containerization tools like Docker and orchestration platforms like Kubernetes, we streamline the deployment and scaling of microservices, ensuring consistent performance across environments.</span></p></li>\n      </ul>\n    </div></html>\n`;\n\nexport default PerformanceOptimizationContent;","import { useState, useEffect } from \"react\";\n\ninterface Section {\n  id: string;\n  color: string;\n}\n\nconst useBackgroundColor = (sections: Section[]) => {\n  const [backgroundColor, setBackgroundColor] = useState<string>(\"transparent\");\n  const [isNavbarFixed, setIsNavbarFixed] = useState<boolean>(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const navbar = document.getElementById(\"navbar\");\n\n      if (navbar) {\n        const navbarIsFixed = window.getComputedStyle(navbar).position === \"fixed\";\n\n        if (navbarIsFixed && !isNavbarFixed) {\n          setIsNavbarFixed(true);\n        } else if (!navbarIsFixed && isNavbarFixed) {\n          setIsNavbarFixed(false);\n          setBackgroundColor(\"transparent\");\n        }\n\n        if (navbarIsFixed) {\n          const sectionInView = sections.find(({ id }) => {\n            const element = document.getElementById(id);\n            if (!element) return false;\n            const rect = element.getBoundingClientRect();\n            return rect.top <= window.innerHeight && rect.bottom >= 0;\n          });\n\n          if (sectionInView) {\n            setBackgroundColor(sectionInView.color);\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    handleScroll(); // Initial check\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [sections, isNavbarFixed]);\n\n  useEffect(() => {\n    document.body.style.backgroundColor = backgroundColor;\n  }, [backgroundColor]);\n\n  // Apply transition duration to body and theme-color meta tag\n  useEffect(() => {\n    const body = document.body;\n    const themeColorMetaTag = document.querySelector('meta[name=\"theme-color\"]');\n    if (backgroundColor === \"transparent\") {\n      body.style.transition = \"background-color 0.5s ease\"; // Smooth transition from transparent\n    } else {\n      body.style.transition = \"background-color 0.3s ease\"; // Faster transition for other colors\n    }\n\n\n    // body.style.transition = \"background-color 0.5s ease\"; // Smooth transition effect\n\n    return () => {\n      body.style.transition = \"\"; // Clean up transition on unmount\n    };\n  }, []);\n\n  useEffect(() => {\n    let backgroundColor = document.body.style.backgroundColor;\n    // if (backgroundColor == \"transparent\") {\n    //   // backgroundColor = \"#yellow\"\n    // }\n    const themeColorMetaTag = document.querySelector('meta[name=\"theme-color\"]');\n    if (themeColorMetaTag) {\n      themeColorMetaTag.setAttribute(\"content\", backgroundColor);\n    } else {\n      const meta = document.createElement('meta');\n      meta.name = \"theme-color\";\n      meta.content = backgroundColor;\n      document.head.appendChild(meta);\n    }\n  }, [backgroundColor]);\n\n  \n\n  return backgroundColor;\n};\n\n\n\nexport default useBackgroundColor;\n"],"names":["MiddleBlock","lazy","Contact","Container","ScrollToTop","PerformanceOptimization","backgroundColor","useBackgroundColor","id","color","_jsxs","children","className","style","_jsx","title","content","dangerouslySetInnerHTML","__html","ContactContent","sections","setBackgroundColor","useState","isNavbarFixed","setIsNavbarFixed","useEffect","handleScroll","navbar","document","getElementById","navbarIsFixed","window","getComputedStyle","position","sectionInView","find","_ref","element","rect","getBoundingClientRect","top","innerHeight","bottom","addEventListener","removeEventListener","body","querySelector","transition","themeColorMetaTag","setAttribute","meta","createElement","name","head","appendChild"],"sourceRoot":""}